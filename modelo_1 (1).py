# -*- coding: utf-8 -*-
"""modelo_1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LdEo48x7o30MAR7veDMBixvaz59F_fHE
"""

from sklearn.tree import DecisionTreeRegressor
import pandas as pd
from sklearn.model_selection import GridSearchCV

dv = pd.read_csv('/content/data_wage_train.csv')

test = pd.read_csv('/content/data_test.csv')

y = dv['wage']
x = dv.drop(columns='wage')

x

tree = DecisionTreeRegressor()
tree.fit(x, y)
preds = tree.predict(test)

pd.DataFrame({'id':range(0, 106),
              'Expected':preds}).to_csv('vog1.csv', index=False)

param_grid = {'max_depth':[2, 3, 1],
              'min_samples_split':[3, 0, 2, 1]}
g_tree = GridSearchCV(DecisionTreeRegressor(), scoring='neg_mean_squared_error',
                      cv=5, param_grid=param_grid)

g_tree.fit(x, y)

preds = g_tree.predict(test)

pd.DataFrame({'id':range(0, 106),
              'Expected':preds}).to_csv('vog1.csv', index=False)

"""# Random forest









"""

from sklearn.ensemble import RandomForestRegressor
from sklearn.model_selection import GridSearchCV

fr = RandomForestRegressor()
fr.fit(x, y)
preds = fr.predict(test)

param_grids = {'n_stimators' : [8, 1, 2],
               'max_depth' : [9,10,7,6],
               'min_samples_split' : [6, 8, 2, 1]}
fr_grid = GridSearchCV(RandomForestRegressor(), scoring = 'neg_mean_squared_error', param_grid=param_grid, cv=14)
fr_grid.fit(x, y)
preds = fr_grid.predict(test)

pd.DataFrame({'id':range(0, 106),
              'Expected':preds}).to_csv('vog1.csv', index=False)

from  xgboost import XGBRegressor

xgb = XGBRegressor()
xgb.fit(x, y)
pred = xgb.predict(test)

para_grid = {'max_depth' : [3, 0, 2],
             'eta': [0.001, 0.01, 0.1],
             'subsample': [0.0, 0.1, 0.2],
             'colsample_bytree' : [0.3, 0.4, 0.8],
             'n_estimators': [8, 6, 3],
             'alpha': [1, 6, 9]}
xgb_grid = GridSearchCV(XGBRegressor(), scoring='neg_mean_squared_error', param_grid=param_grid, cv = 5)
xgb_grid.fit(x, y)
preds = xgb_grid.predict(test)

pd.DataFrame({'id':range(0, 106),
              'Expected':preds}).to_csv('vog1.csv', index=False)